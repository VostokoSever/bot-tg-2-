import os
import re
import random
import logging
from datetime import datetime, timezone, timedelta

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, PicklePersistence
)

# ---------- Config ----------
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "PASTE_TOKEN_HERE")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")  # optional
BROTHER_USERNAME = os.environ.get("BROTHER_USERNAME")  # like "@vasya"
MODEL_NAME = os.environ.get("MODEL_NAME", "gpt-4o-mini")

KYIV_TZ = timezone(timedelta(hours=3))
RATE_LIMIT_PER_MIN = 8

# Webhook base URL (no trailing slash). Prefer RENDER_EXTERNAL_URL; fallback to WEBHOOK_BASE.
WEBHOOK_BASE = (os.environ.get("RENDER_EXTERNAL_URL") or os.environ.get("WEBHOOK_BASE") or "").rstrip("/")
PORT = int(os.environ.get("PORT", "10000"))

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("smart-bot")

# ---------- Optional OpenAI ----------
_openai_client = None
if OPENAI_API_KEY:
    try:
        from openai import OpenAI
        _openai_client = OpenAI(api_key=OPENAI_API_KEY)
        log.info("OpenAI client initialized.")
    except Exception as e:
        log.warning("OpenAI init failed: %s", e)
        _openai_client = None

async def llm_answer(prompt: str, sys: str = "You are a concise, witty assistant."):
    if _openai_client:
        try:
            resp = _openai_client.chat.completions.create(
                model=MODEL_NAME,
                temperature=0.5,
                messages=[
                    {"role": "system", "content": sys},
                    {"role": "user", "content": prompt},
                ],
            )
            return resp.choices[0].message.content.strip()
        except Exception as e:
            log.warning("LLM error: %s", e)
    canned = [
        "–ö–æ—Ä–æ—Ç–∫–æ: —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ü–µ–ª—å, –æ–ø—Ä–µ–¥–µ–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—å –∫—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏.",
        "–î—É–º–∞–π –≤ –º–æ–¥–µ–ª–∏ ¬´–≤—Ö–æ–¥‚Üí–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ‚Üí–≤—ã—Ö–æ–¥¬ª.",
        "–û–±—ä—è—Å–Ω–∏ 10‚Äë–ª–µ—Ç–Ω–µ–º—É: –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø–æ–Ω—è–ª —Ç–µ–º—É."
    ]
    return random.choice(canned)

# ---------- Data ----------
FACTS = {
    "–Ω–∞—É–∫–∞": [
        "–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±—ã—Å—Ç—Ä–µ–µ —Å–≤–µ—Ç–∞.",
        "–ß—ë—Ä–Ω—ã–µ –¥—ã—Ä—ã —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –∏–∑–ª—É—á–∞—é—Ç (–•–æ–∫–∏–Ω–≥).",
        "CRISPR ‚Äî ¬´–Ω–æ–∂–Ω–∏—Ü—ã¬ª –¥–ª—è –î–ù–ö."
    ],
    "–∏—Å—Ç–æ—Ä–∏—è": [
        "–í–µ–ª–∏–∫–∞—è —Å—Ç–µ–Ω–∞ ‚Äî —Å–µ—Ç—å —É–∫—Ä–µ–ø–ª–µ–Ω–∏–π, –∞ –Ω–µ —Ä–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è.",
        "–ü–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç—å —à—É–º–µ—Ä–æ–≤ ‚Äî –∫–ª–∏–Ω–æ–ø–∏—Å—å –Ω–∞ —Ç–∞–±–ª–∏—á–∫–∞—Ö.",
        "–†–∏–º—Å–∫–∏–µ –¥–æ—Ä–æ–≥–∏ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã, –ø–æ—ç—Ç–æ–º—É –∂–∏–≤—É—á–∏."
    ],
    "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [
        "–ú–æ—â–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–∏–Ω—É—É–º–∞ –±–æ–ª—å—à–µ, —á–µ–º —É –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.",
        "–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –≤—Å–ø–ª—ã–≤–∞—é—Ç –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –∏ –ø—Ä–∏—Ä–æ–¥–µ.",
        "NP-–ø–æ–ª–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç—Ä—É–¥–Ω–æ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ."
    ],
}

QUIZ = [
    {"q": "–ß—Ç–æ –±–æ–ª—å—à–µ: 2^100 –∏–ª–∏ 10^30?", "opts": ["2^100", "10^30"], "a": 0, "ex": "2^10‚âà10^3 ‚áí 2^100‚âà10^30√ó1.024"},
    {"q": "–¢–µ—Ä–º–∏–Ω ¬´—á—ë—Ä–Ω–∞—è –¥—ã—Ä–∞¬ª –ø–æ–ø—É–ª—è—Ä–∏–∑–æ–≤–∞–ª‚Ä¶", "opts": ["–î–∂. –£–∏–ª–µ—Ä", "–°. –•–æ–∫–∏–Ω–≥", "–ê. –≠–π–Ω—à—Ç–µ–π–Ω"], "a": 0, "ex": "–î–∂–æ–Ω –£–∏–ª–µ—Ä, 1960-–µ"},
    {"q": "JVM –≤ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞‚Ä¶", "opts": ["Java", "C/C++", "Rust"], "a": 1, "ex": "–ù–∞ C/C++"},
]

# ---------- Helpers ----------
def now_kyiv():
    return datetime.now(tz=KYIV_TZ).strftime("%Y-%m-%d %H:%M")

def is_brother(update: Update) -> bool:
    if not BROTHER_USERNAME:
        return False
    u = update.effective_user
    if not u or not u.username:
        return False
    return ("@" + u.username) == BROTHER_USERNAME

class RateLimiter:
    def __init__(self, per_min=RATE_LIMIT_PER_MIN):
        self.per_min = per_min
        self.tokens = {}  # user_id -> (tokens, ts)

    def check(self, uid: int) -> bool:
        import time
        now = time.time()
        t, last = self.tokens.get(uid, (self.per_min, now))
        elapsed = now - last
        t = min(self.per_min, t + elapsed * (self.per_min / 60.0))
        if t < 1:
            self.tokens[uid] = (t, now)
            return False
        self.tokens[uid] = (t - 1, now)
        return True

rate = RateLimiter()

# ---------- Handlers ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="quiz:start"),
         InlineKeyboardButton("üß† –§–∞–∫—Ç", callback_data="fact:menu")],
        [InlineKeyboardButton("ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", callback_data="ask:hint"),
         InlineKeyboardButton("ü™Ñ –û–±—ä—è—Å–Ω–∏", callback_data="explain:hint")],
    ])
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name or '–¥—Ä—É–≥'}! –Ø –£–º–Ω—ã–π –ë–æ—Ç 2.0 ü§ì\n"
        f"–°–µ–π—á–∞—Å –≤ –ö–∏–µ–≤–µ {now_kyiv()}.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/fact ‚Äî —É–º–Ω—ã–π —Ñ–∞–∫—Ç –ø–æ —Ç–µ–º–µ\n"
        "/quiz ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "/ask –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—Ç ¬´–∫–∞–∫ ChatGPT¬ª\n"
        "/explain —Ç–µ–º–∞ ‚Äî –æ–±—ä—è—Å–Ω—é –ø—Ä–æ—Å—Ç–æ\n"
        "/roast ‚Äî –ª—ë–≥–∫–∞—è –ø–æ–¥–∫–æ–ª–∫–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )
    await update.message.reply_text(text, reply_markup=kb)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚Ä¢ /fact [–Ω–∞—É–∫–∞|–∏—Å—Ç–æ—Ä–∏—è|–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞]\n"
        "‚Ä¢ /quiz ‚Äî –∫–≤–∏–∑\n"
        "‚Ä¢ /ask –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä?\n"
        "‚Ä¢ /explain –ò–Ω–¥–µ–∫—Å—ã –≤ –ë–î ‚Äî –ø—Ä–æ—Å—Ç–æ\n"
        "‚Ä¢ /roast ‚Äî —à—É—Ç–∫–∞ (–¥–ª—è –±—Ä–∞—Ç–∞ ‚Äî –æ—Å–æ–±—ã–π —Ä–µ–∂–∏–º)"
    )

async def send_fact(update_or_cb, topic: str, edit=False):
    msg = f"üß† {topic.capitalize()}: {random.choice(FACTS[topic])}"
    if hasattr(update_or_cb, "message") and update_or_cb.message:
        await update_or_cb.message.reply_text(msg)
    else:
        if edit:
            await update_or_cb.edit_message_text(msg)
        else:
            await update_or_cb.message.reply_text(msg)

async def cmd_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args or []
    if args and args[0].lower() in FACTS:
        await send_fact(update, args[0].lower())
        return
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("–ù–∞—É–∫–∞", callback_data="fact:–Ω–∞—É–∫–∞"),
        InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="fact:–∏—Å—Ç–æ—Ä–∏—è"),
        InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="fact:–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
    ]])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)

async def cmd_roast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target = "–±—Ä–∞—Ç" if is_brother(update) else "—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"
    lines = [
        f"–ö–∞–∂–µ—Ç—Å—è, –º–æ–π {target} –æ–ø—è—Ç—å –ø—ã—Ç–∞–µ—Ç—Å—è –º–µ–Ω—è –ø–µ—Ä–µ–ø–ª—é–Ω—É—Ç—å‚Ä¶ —Å–º–µ–ª–æ üòå",
        "–Ø –Ω–µ –≥–æ–≤–æ—Ä—é, —á—Ç–æ —è —É–º–Ω–µ–µ –≤—Å–µ—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ø–æ—Ä–Ω–æ –∫–∏–≤–∞–µ—Ç.",
        "–ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ—â–µ ‚Äî –≤–∫–ª—é—á—É —Ä–µ–∂–∏–º ¬´–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç —Ç—É—Ç–æ—Ä–∏–∞–ª—ã –Ω–∞ 2√ó¬ª.",
    ]
    await update.message.reply_text("üòè " + random.choice(lines))

async def cmd_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /ask —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
        return
    if not rate.check(update.effective_user.id):
        await update.message.reply_text("–ü–æ–≥–æ–¥–∏ —Å–µ–∫—É–Ω–¥—É, –Ω–µ —Å–ø–∞–º–∏–º. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return
    await update.message.chat.send_action(ChatAction.TYPING)
    q = " ".join(context.args)
    ans = await llm_answer(q, sys="You are a sharp, helpful assistant. Answer concisely with examples when useful.")
    await update.message.reply_text(ans)

async def cmd_explain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /explain —Ç–µ–º–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç.")
        return
    if not rate.check(update.effective_user.id):
        await update.message.reply_text("–ß—É—Ç—å-—á—É—Ç—å –ø–æ–¥–æ–∂–¥—ë–º. –ï—â—ë –º–≥–Ω–æ–≤–µ–Ω–∏–µ.")
        return
    await update.message.chat.send_action(ChatAction.TYPING)
    topic = " ".join(context.args)
    prompt = "–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º —Å 1 –∞–Ω–∞–ª–æ–≥–∏–µ–π –∏ 3 —à–∞–≥–∞–º–∏ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∫–∏. –¢–µ–º–∞: " + topic
    ans = await llm_answer(prompt)
    await update.message.reply_text(ans)

async def cmd_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.setdefault("quiz", {"i": 0, "score": 0})
    context.user_data["quiz"]["order"] = random.sample(range(len(QUIZ)), len(QUIZ))
    await send_quiz_q(update, context)

async def send_quiz_q(update_or_cb, context: ContextTypes.DEFAULT_TYPE, edit=False):
    st = context.user_data.get("quiz", {"i": 0, "score": 0, "order": list(range(len(QUIZ)))})
    if st["i"] >= len(QUIZ):
        msg = f"–ò—Ç–æ–≥: {st['score']}/{len(QUIZ)}. {'–ù–µ–ø–ª–æ—Ö–æ!' if st['score'] >= len(QUIZ)*0.6 else '–ü–æ—Ç—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è –µ—â—ë?'}"
        if hasattr(update_or_cb, "message") and update_or_cb.message:
            await update_or_cb.message.reply_text(msg)
        else:
            await update_or_cb.edit_message_text(msg)
        context.user_data["quiz"] = {"i": 0, "score": 0, "order": random.sample(range(len(QUIZ)), len(QUIZ))}
        return
    q_idx = st["order"][st["i"]]
    item = QUIZ[q_idx]
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(opt, callback_data=f"quiz:ans:{n}") for n, opt in enumerate(item["opts"])]])
    text = f"üéØ –í–æ–ø—Ä–æ—Å {st['i']+1}/{len(QUIZ)}:\n{item['q']}"
    if hasattr(update_or_cb, "message") and update_or_cb.message:
        await update_or_cb.message.reply_text(text, reply_markup=kb)
    else:
        if edit:
            await update_or_cb.edit_message_text(text, reply_markup=kb)
        else:
            await update_or_cb.message.reply_text(text, reply_markup=kb)

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    if data.startswith("fact:"):
        _, t = data.split(":", 1)
        if t == "menu":
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("–ù–∞—É–∫–∞", callback_data="fact:–Ω–∞—É–∫–∞"),
                InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è", callback_data="fact:–∏—Å—Ç–æ—Ä–∏—è"),
                InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="fact:–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
            ]])
            await q.edit_message_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)
        else:
            await send_fact(q, t, edit=True)
    elif data.startswith("quiz:"):
        parts = data.split(":")
        if len(parts) == 2 and parts[1] == "start":
            context.user_data["quiz"] = {"i": 0, "score": 0, "order": random.sample(range(len(QUIZ)), len(QUIZ))}
            await send_quiz_q(q, context, edit=True)
        elif len(parts) == 3 and parts[1] == "ans":
            idx = int(parts[2])
            st = context.user_data["quiz"]
            q_idx = st["order"][st["i"]]
            item = QUIZ[q_idx]
            correct = (idx == item["a"])
            if correct:
                st["score"] += 1
            st["i"] += 1
            feedback = ("‚úÖ –í–µ—Ä–Ω–æ! " if correct else "‚ùå –ù–µ —Å–æ–≤—Å–µ–º. ") + item["ex"]
            await q.edit_message_text(feedback)
            await send_quiz_q(q, context, edit=False)
    elif data.startswith("ask:"):
        await q.edit_message_text("–ù–∞–ø–∏—à–∏: /ask —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É —É–º–Ω–æ –∏ –ø–æ –¥–µ–ª—É.")
    elif data.startswith("explain:"):
        await q.edit_message_text("–ù–∞–ø–∏—à–∏: /explain —Ç–µ–º–∞ ‚Äî –æ–±—ä—è—Å–Ω—é –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.")

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip().lower()
    if re.search(r"\b(–∫—Ç–æ\s+—É–º–Ω|—É–º–Ω–µ–µ)\b", txt):
        await update.message.reply_text("–û—á–µ–≤–∏–¥–Ω–æ, —è ü§ñ. –ù–æ –∏ —Ç—ã —Ö–æ—Ä–æ—à, –ø—Ä–æ—Å—Ç–æ –¥–∞–π –º–Ω–µ –±–ª–µ—Å–Ω—É—Ç—å.")
        return
    if txt.endswith("?") and len(txt) > 5:
        await cmd_ask(update, context)
        return
    topic = random.choice(list(FACTS.keys()))
    await update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î. –ê –ø–æ–∫–∞ –≤–æ—Ç —Ñ–∞–∫—Ç –∏–∑ ¬´{topic}¬ª: {random.choice(FACTS[topic])}")

def build_app():
    persistence = PicklePersistence(filepath="smart_state.pkl")
    app = ApplicationBuilder().token(TOKEN).persistence(persistence).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("fact", cmd_fact))
    app.add_handler(CommandHandler("quiz", cmd_quiz))
    app.add_handler(CommandHandler("ask", cmd_ask))
    app.add_handler(CommandHandler("explain", cmd_explain))
    app.add_handler(CommandHandler("roast", cmd_roast))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app

def main():
    if not TOKEN or TOKEN == "PASTE_TOKEN_HERE":
        raise SystemExit("–£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    app = build_app()

    # Webhook mode for Render Web Service
    if not WEBHOOK_BASE:
        raise SystemExit("–ù–µ –∑–∞–¥–∞–Ω WEBHOOK_BASE/RENDER_EXTERNAL_URL. –ù–∞ Render –æ–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞.")
    webhook_path = f"/webhook/{TOKEN}"
    webhook_url = f"{WEBHOOK_BASE}{webhook_path}"
    log.info("Starting webhook server on port %s, path %s", PORT, webhook_path)
    log.info("Setting webhook to %s", webhook_url)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=webhook_path,
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
